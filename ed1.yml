name: üöÄ WebJob CI & Deployment

on:
  push:
    branches:
      - main

env:
  PROJECT_PATH: 'WebJob/WebJob.csproj'
  CONFIGURATION: 'Release'
  BUILD_OUTPUT_DIR: '${{ github.workspace }}\WebJob\bin\Release'
  TARGET_ROOT: '${{ github.workspace }}\publish_output\app_data\jobs\triggered'
  ZIP_PATH: '${{ github.workspace }}\publish_output\webjobs.zip'
  ARTIFACT_NAME: 'webjobs-artifact'

jobs:
  build:
    name: üèóÔ∏è Build WebJobs
    runs-on: windows-latest

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üõ†Ô∏è Setup MSBuild & NuGet
      uses: microsoft/setup-msbuild@v1.1

    - name: üîÉ Restore NuGet Packages
      run: nuget restore ${{ env.PROJECT_PATH }}

    - name: üß± Build WebJob
      run: |
        msbuild ${{ env.PROJECT_PATH }} `
          /p:Configuration=${{ env.CONFIGURATION }} `
          /p:OutputPath=${{ env.BUILD_OUTPUT_DIR }}

    - name: üìÇ Clone Jobs with Schedules
      shell: pwsh
      env:
        SCHEDULED_JOBS: ${{ vars.SCHEDULED_JOBS }}
      run: |
        $jobs = $env:SCHEDULED_JOBS | ConvertFrom-Json
        $baseOutput = "${{ env.BUILD_OUTPUT_DIR }}"
        $targetRoot = "${{ env.TARGET_ROOT }}"
        New-Item -Path $targetRoot -ItemType Directory -Force

        foreach ($job in $jobs) {
          $target = Join-Path $targetRoot $job.Name
          New-Item -ItemType Directory -Path $target -Force

          Copy-Item "$baseOutput\*" -Destination $target -Recurse

          $exe = Get-ChildItem "$target" -Filter "*.exe" | Select-Object -First 1
          Set-Content -Path (Join-Path $target "run.cmd") -Value "@echo off`n$($exe.Name)"
          $settings = @{ schedule = $job.Cron } | ConvertTo-Json -Depth 2
          Set-Content -Path (Join-Path $target "settings.job") -Value $settings
        }

    - name: üóúÔ∏è Zip Folder
      run: |
        Compress-Archive `
          -Path "${{ github.workspace }}\publish_output\*" `
          -DestinationPath "${{ env.ZIP_PATH }}"

    - name: ‚¨ÜÔ∏è Upload Artifact for Deploy
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ZIP_PATH }}

  deploy:
    name: üöÄ Deploy to Azure
    needs: build
    runs-on: [self-hosted, windows]

    steps:
    - name: ‚¨áÔ∏è Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: deploy_input

    - name: üìÇ Check Files
      run: |
        dir deploy_input

    - name: üöÄ Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: deploy_input\webjobs.zip
